{"version":3,"sources":["components/GameCard/GameCard.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","id","position","onClick","guessCard","alt","name","src","image","Wrapper","children","guessedArray","randomArray","randomizePosition","randomNumber","Math","floor","random","length","includes","push","App","arrayCheck","_this","setState","score","currentScore","alert","highScore","state","gamecards","updateScore","guessID","console","log","_this2","this","components_Wrapper_Wrapper","map","gamecard","components_GameCard_GameCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"4pDAaeA,eAVE,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,GAAIL,EAAMM,UAC5BL,EAAAC,EAAAC,cAAA,OAAKI,QAAS,kBAAMP,EAAMQ,UAAUR,EAAMK,MACtCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,MAAOP,GAAIL,EAAMK,iBCFnDQ,SAFC,SAAAb,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,YCGrDC,EAAe,GAEfC,EAAc,GAOZC,EAAoB,SAApBA,IACJ,IAAIC,EALeC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAOjDL,EAAYM,OAAS,KACnBN,EAAYO,SAASL,GACvBD,KAEAD,EAAYQ,KAAKN,GACjBD,OAuESQ,6MA/DbC,WAAa,SAAArB,GACX,QAAIU,EAAaQ,SAASlB,KACxBsB,EAAKC,SAAS,CAAEC,MAAOF,EAAKE,MAAMC,aAAe,IACjDC,MAAM,YACNhB,EAAe,IACR,MAMXc,MAAQ,CACNC,aAAc,EACdE,UAAW,KAGbC,MAAQ,CACNC,eAGFC,YAAc,WACZnB,EAAc,GACdC,IACAU,EAAKC,SAAS,CAAEC,MAAOF,EAAKE,MAAMC,aAAef,EAAaO,SAC1DK,EAAKE,MAAMG,UAAYjB,EAAaO,QACtCK,EAAKC,SAAS,CAAEC,MAAOF,EAAKE,MAAMG,UAAYjB,EAAaO,YAI/Dd,UAAY,SAAAH,GAEV,IAAI+B,EAAUT,EAAKM,MAAMC,UAAU7B,EAAK,GAAGA,GAGtCsB,EAAKD,WAAWU,KACnBrB,EAAaS,KAAKY,GAClBT,EAAKQ,eAGPE,QAAQC,IAAIvB,4EAGL,IAAAwB,EAAAC,KACP,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAYqC,KAAKX,MAAMC,aAAvB,KACA7B,EAAAC,EAAAC,cAAA,0BAAkBqC,KAAKX,MAAMG,WAC7B/B,EAAAC,EAAAC,cAACsC,EAAD,KACGD,KAAKP,MAAMC,UAAUQ,IAAI,SAAAC,GAAQ,OAChC1C,EAAAC,EAAAC,cAACyC,EAAD,CACEtC,SAAU,WAAaU,EAAY2B,EAAStC,GAAK,GACjDG,UAAW+B,EAAK/B,UAChBH,GAAIsC,EAAStC,GACbwC,IAAKF,EAAStC,GACdO,MAAO+B,EAAS/B,mBAxDZkC,aCxBlBC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.2edaf247.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n    <div className=\"card\" id={props.position}>\n        <div onClick={() => props.guessCard(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} id={props.id}/>\n            </div>\n        </div>\n    </div>\n);\n\nexport default GameCard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GameCard from \"./components/GameCard\"\nimport gamecards from \"./gamecards.json\"\nimport Wrapper from \"./components/Wrapper\"\n\nlet guessedArray = [];\n// let gameOn = false;\nlet randomArray = [];\n\nconst randomizeNumber = () => {\n  let randomNumber = Math.floor((Math.random() * 12) + 1)\n  return(randomNumber)\n}\n\nconst randomizePosition = () => {\n  let randomNumber = randomizeNumber();\n\n  if (randomArray.length < 12) {\n    if (randomArray.includes(randomNumber)) {\n      randomizePosition()\n    } else {\n      randomArray.push(randomNumber);\n      randomizePosition();\n    }\n  }\n\n}\n\nclass App extends Component {\n\n  arrayCheck = id => {\n    if (guessedArray.includes(id)) {\n      this.setState({ score: this.score.currentScore = 0 });\n      alert(\"you lose\");\n      guessedArray = [];\n      return true\n    } else {\n      return false\n    }\n  }\n\n  score = {\n    currentScore: 0,\n    highScore: 0,\n  }\n\n  state = {\n    gamecards,\n  };\n\n  updateScore = () => {\n    randomArray = [];\n    randomizePosition();\n    this.setState({ score: this.score.currentScore = guessedArray.length });\n    if (this.score.highScore < guessedArray.length) {\n      this.setState({ score: this.score.highScore = guessedArray.length })\n    };\n  }\n\n  guessCard = id => {\n\n    let guessID = this.state.gamecards[id - 1].id;\n    // console.log(clickCheck);\n\n    if (!this.arrayCheck(guessID)) {\n      guessedArray.push(guessID);\n      this.updateScore();\n    }\n\n    console.log(guessedArray);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Score: {this.score.currentScore} </h1>\n        <h1> High Score: {this.score.highScore}</h1>\n        <Wrapper>\n          {this.state.gamecards.map(gamecard => (\n            <GameCard\n              position={\"position\" + randomArray[gamecard.id - 1]}\n              guessCard={this.guessCard}\n              id={gamecard.id}\n              key={gamecard.id}\n              image={gamecard.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}